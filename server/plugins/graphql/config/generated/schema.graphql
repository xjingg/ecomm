type Brand {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  image: UploadFile
  perfumes(sort: String, limit: Int, start: Int, where: JSON): [Perfume]
}

type BrandAggregator {
  count: Int
}

type BrandConnection {
  values: [Brand]
  groupBy: BrandGroupBy
  aggregate: BrandAggregator
}

type BrandConnection_id {
  key: ID
  connection: BrandConnection
}

type BrandConnectionCreatedAt {
  key: DateTime
  connection: BrandConnection
}

type BrandConnectionDescription {
  key: String
  connection: BrandConnection
}

type BrandConnectionImage {
  key: ID
  connection: BrandConnection
}

type BrandConnectionName {
  key: String
  connection: BrandConnection
}

type BrandConnectionUpdatedAt {
  key: DateTime
  connection: BrandConnection
}

type BrandGroupBy {
  _id: [BrandConnection_id]
  createdAt: [BrandConnectionCreatedAt]
  updatedAt: [BrandConnectionUpdatedAt]
  name: [BrandConnectionName]
  description: [BrandConnectionDescription]
  image: [BrandConnectionImage]
}

input BrandInput {
  name: String
  description: String
  image: ID
  perfumes: [ID]
}

input createBrandInput {
  data: BrandInput
}

type createBrandPayload {
  brand: Brand
}

input createPerfumeInput {
  data: PerfumeInput
}

type createPerfumePayload {
  perfume: Perfume
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteBrandInput {
  where: InputID
}

type deleteBrandPayload {
  brand: Brand
}

input deletePerfumeInput {
  where: InputID
}

type deletePerfumePayload {
  perfume: Perfume
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Brand | createBrandPayload | updateBrandPayload | deleteBrandPayload | BrandConnection | BrandAggregator | BrandGroupBy | BrandConnection_id | BrandConnectionCreatedAt | BrandConnectionUpdatedAt | BrandConnectionName | BrandConnectionDescription | BrandConnectionImage | Perfume | createPerfumePayload | updatePerfumePayload | deletePerfumePayload | PerfumeConnection | PerfumeAggregator | PerfumeAggregatorSum | PerfumeAggregatorAvg | PerfumeAggregatorMin | PerfumeAggregatorMax | PerfumeGroupBy | PerfumeConnection_id | PerfumeConnectionCreatedAt | PerfumeConnectionUpdatedAt | PerfumeConnectionName | PerfumeConnectionDescription | PerfumeConnectionImage | PerfumeConnectionPrice | PerfumeConnectionBrand | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createBrand(input: createBrandInput): createBrandPayload
  updateBrand(input: updateBrandInput): updateBrandPayload
  deleteBrand(input: deleteBrandInput): deleteBrandPayload
  createPerfume(input: createPerfumeInput): createPerfumePayload
  updatePerfume(input: updatePerfumeInput): updatePerfumePayload
  deletePerfume(input: deletePerfumeInput): deletePerfumePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Perfume {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  image: UploadFile
  price: Float
  brand: Brand
}

type PerfumeAggregator {
  count: Int
  sum: PerfumeAggregatorSum
  avg: PerfumeAggregatorAvg
  min: PerfumeAggregatorMin
  max: PerfumeAggregatorMax
}

type PerfumeAggregatorAvg {
  price: Float
}

type PerfumeAggregatorMax {
  price: Float
}

type PerfumeAggregatorMin {
  price: Float
}

type PerfumeAggregatorSum {
  price: Float
}

type PerfumeConnection {
  values: [Perfume]
  groupBy: PerfumeGroupBy
  aggregate: PerfumeAggregator
}

type PerfumeConnection_id {
  key: ID
  connection: PerfumeConnection
}

type PerfumeConnectionBrand {
  key: ID
  connection: PerfumeConnection
}

type PerfumeConnectionCreatedAt {
  key: DateTime
  connection: PerfumeConnection
}

type PerfumeConnectionDescription {
  key: String
  connection: PerfumeConnection
}

type PerfumeConnectionImage {
  key: ID
  connection: PerfumeConnection
}

type PerfumeConnectionName {
  key: String
  connection: PerfumeConnection
}

type PerfumeConnectionPrice {
  key: Float
  connection: PerfumeConnection
}

type PerfumeConnectionUpdatedAt {
  key: DateTime
  connection: PerfumeConnection
}

type PerfumeGroupBy {
  _id: [PerfumeConnection_id]
  createdAt: [PerfumeConnectionCreatedAt]
  updatedAt: [PerfumeConnectionUpdatedAt]
  name: [PerfumeConnectionName]
  description: [PerfumeConnectionDescription]
  image: [PerfumeConnectionImage]
  price: [PerfumeConnectionPrice]
  brand: [PerfumeConnectionBrand]
}

input PerfumeInput {
  name: String
  description: String
  image: ID
  price: Float
  brand: ID
}

type Query {
  brand(id: ID!): Brand
  brands(sort: String, limit: Int, start: Int, where: JSON): [Brand]
  brandsConnection(sort: String, limit: Int, start: Int, where: JSON): BrandConnection
  perfume(id: ID!): Perfume
  perfumes(sort: String, limit: Int, start: Int, where: JSON): [Perfume]
  perfumesConnection(sort: String, limit: Int, start: Int, where: JSON): PerfumeConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateBrandInput {
  where: InputID
  data: BrandInput
}

type updateBrandPayload {
  brand: Brand
}

input updatePerfumeInput {
  where: InputID
  data: PerfumeInput
}

type updatePerfumePayload {
  perfume: Perfume
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
