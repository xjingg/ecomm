type Brand {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  image: UploadFile
  perfumes(sort: String, limit: Int, start: Int, where: JSON): [Perfumes]
}

type BrandAggregator {
  count: Int
}

type BrandConnection {
  values: [Brand]
  groupBy: BrandGroupBy
  aggregate: BrandAggregator
}

type BrandConnection_id {
  key: ID
  connection: BrandConnection
}

type BrandConnectionCreatedAt {
  key: DateTime
  connection: BrandConnection
}

type BrandConnectionDescription {
  key: String
  connection: BrandConnection
}

type BrandConnectionImage {
  key: ID
  connection: BrandConnection
}

type BrandConnectionName {
  key: String
  connection: BrandConnection
}

type BrandConnectionUpdatedAt {
  key: DateTime
  connection: BrandConnection
}

type BrandGroupBy {
  _id: [BrandConnection_id]
  createdAt: [BrandConnectionCreatedAt]
  updatedAt: [BrandConnectionUpdatedAt]
  name: [BrandConnectionName]
  description: [BrandConnectionDescription]
  image: [BrandConnectionImage]
}

input BrandInput {
  name: String
  description: String
  image: ID
  perfumes: [ID]
}

input createBrandInput {
  data: BrandInput
}

type createBrandPayload {
  brand: Brand
}

input createOrdersInput {
  data: OrdersInput
}

type createOrdersPayload {
  order: Orders
}

input createPerfumesInput {
  data: PerfumesInput
}

type createPerfumesPayload {
  perfume: Perfumes
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteBrandInput {
  where: InputID
}

type deleteBrandPayload {
  brand: Brand
}

input deleteOrdersInput {
  where: InputID
}

type deleteOrdersPayload {
  order: Orders
}

input deletePerfumesInput {
  where: InputID
}

type deletePerfumesPayload {
  perfume: Perfumes
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Brand | createBrandPayload | updateBrandPayload | deleteBrandPayload | BrandConnection | BrandAggregator | BrandGroupBy | BrandConnection_id | BrandConnectionCreatedAt | BrandConnectionUpdatedAt | BrandConnectionName | BrandConnectionDescription | BrandConnectionImage | Orders | createOrdersPayload | updateOrdersPayload | deleteOrdersPayload | OrdersConnection | OrdersAggregator | OrdersGroupBy | OrdersConnection_id | OrdersConnectionCreatedAt | OrdersConnectionUpdatedAt | OrdersConnectionAddress | OrdersConnectionPostalCode | OrdersConnectionCity | OrdersConnectionPerfumes | OrdersConnectionAmount | Perfumes | createPerfumesPayload | updatePerfumesPayload | deletePerfumesPayload | PerfumesConnection | PerfumesAggregator | PerfumesAggregatorSum | PerfumesAggregatorAvg | PerfumesAggregatorMin | PerfumesAggregatorMax | PerfumesGroupBy | PerfumesConnection_id | PerfumesConnectionCreatedAt | PerfumesConnectionUpdatedAt | PerfumesConnectionName | PerfumesConnectionDescription | PerfumesConnectionImage | PerfumesConnectionPrice | PerfumesConnectionBrand | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createBrand(input: createBrandInput): createBrandPayload
  updateBrand(input: updateBrandInput): updateBrandPayload
  deleteBrand(input: deleteBrandInput): deleteBrandPayload
  createOrders(input: createOrdersInput): createOrdersPayload
  updateOrders(input: updateOrdersInput): updateOrdersPayload
  deleteOrders(input: deleteOrdersInput): deleteOrdersPayload
  createPerfumes(input: createPerfumesInput): createPerfumesPayload
  updatePerfumes(input: updatePerfumesInput): updatePerfumesPayload
  deletePerfumes(input: deletePerfumesInput): deletePerfumesPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Orders {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: String!
  postalCode: String!
  city: String!
  perfumes: JSON!
  amount: Float!
}

type OrdersAggregator {
  count: Int
}

type OrdersConnection {
  values: [Orders]
  groupBy: OrdersGroupBy
  aggregate: OrdersAggregator
}

type OrdersConnection_id {
  key: ID
  connection: OrdersConnection
}

type OrdersConnectionAddress {
  key: String
  connection: OrdersConnection
}

type OrdersConnectionAmount {
  key: Float
  connection: OrdersConnection
}

type OrdersConnectionCity {
  key: String
  connection: OrdersConnection
}

type OrdersConnectionCreatedAt {
  key: DateTime
  connection: OrdersConnection
}

type OrdersConnectionPerfumes {
  key: JSON
  connection: OrdersConnection
}

type OrdersConnectionPostalCode {
  key: String
  connection: OrdersConnection
}

type OrdersConnectionUpdatedAt {
  key: DateTime
  connection: OrdersConnection
}

type OrdersGroupBy {
  _id: [OrdersConnection_id]
  createdAt: [OrdersConnectionCreatedAt]
  updatedAt: [OrdersConnectionUpdatedAt]
  address: [OrdersConnectionAddress]
  postalCode: [OrdersConnectionPostalCode]
  city: [OrdersConnectionCity]
  perfumes: [OrdersConnectionPerfumes]
  amount: [OrdersConnectionAmount]
}

input OrdersInput {
  address: String!
  postalCode: String!
  city: String!
  perfumes: JSON!
  amount: Float!
}

type Perfumes {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  image: UploadFile
  price: Float
  brand: Brand
}

type PerfumesAggregator {
  count: Int
  sum: PerfumesAggregatorSum
  avg: PerfumesAggregatorAvg
  min: PerfumesAggregatorMin
  max: PerfumesAggregatorMax
}

type PerfumesAggregatorAvg {
  price: Float
}

type PerfumesAggregatorMax {
  price: Float
}

type PerfumesAggregatorMin {
  price: Float
}

type PerfumesAggregatorSum {
  price: Float
}

type PerfumesConnection {
  values: [Perfumes]
  groupBy: PerfumesGroupBy
  aggregate: PerfumesAggregator
}

type PerfumesConnection_id {
  key: ID
  connection: PerfumesConnection
}

type PerfumesConnectionBrand {
  key: ID
  connection: PerfumesConnection
}

type PerfumesConnectionCreatedAt {
  key: DateTime
  connection: PerfumesConnection
}

type PerfumesConnectionDescription {
  key: String
  connection: PerfumesConnection
}

type PerfumesConnectionImage {
  key: ID
  connection: PerfumesConnection
}

type PerfumesConnectionName {
  key: String
  connection: PerfumesConnection
}

type PerfumesConnectionPrice {
  key: Float
  connection: PerfumesConnection
}

type PerfumesConnectionUpdatedAt {
  key: DateTime
  connection: PerfumesConnection
}

type PerfumesGroupBy {
  _id: [PerfumesConnection_id]
  createdAt: [PerfumesConnectionCreatedAt]
  updatedAt: [PerfumesConnectionUpdatedAt]
  name: [PerfumesConnectionName]
  description: [PerfumesConnectionDescription]
  image: [PerfumesConnectionImage]
  price: [PerfumesConnectionPrice]
  brand: [PerfumesConnectionBrand]
}

input PerfumesInput {
  name: String
  description: String
  image: ID
  price: Float
  brand: ID
}

type Query {
  brand(id: ID!): Brand
  brands(sort: String, limit: Int, start: Int, where: JSON): [Brand]
  brandsConnection(sort: String, limit: Int, start: Int, where: JSON): BrandConnection
  order(id: ID!): Orders
  orders(sort: String, limit: Int, start: Int, where: JSON): [Orders]
  ordersConnection(sort: String, limit: Int, start: Int, where: JSON): OrdersConnection
  perfume(id: ID!): Perfumes
  perfumes(sort: String, limit: Int, start: Int, where: JSON): [Perfumes]
  perfumesConnection(sort: String, limit: Int, start: Int, where: JSON): PerfumesConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateBrandInput {
  where: InputID
  data: BrandInput
}

type updateBrandPayload {
  brand: Brand
}

input updateOrdersInput {
  where: InputID
  data: OrdersInput
}

type updateOrdersPayload {
  order: Orders
}

input updatePerfumesInput {
  where: InputID
  data: PerfumesInput
}

type updatePerfumesPayload {
  perfume: Perfumes
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
